// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../src/@generated/prisma-nestjs-graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  /// @Validator.IsEmail()
  email              String              @unique
  /// @Validator.MinLength(2)
  /// @Validator.IsString()
  username           String              @unique
  /// @Validator.IsString()
  /// @Validator.MinLength(2)
  firstName          String
  /// @Validator.IsString()
  /// @Validator.MinLength(2)
  lastName           String
  /// @Validator.IsDate()
  dateOfBirth        DateTime
  // @Validator.IsEnum(ROLE, { each: true })
  role               ROLE                @default(USER)
  // @Validator.IsEnum(GENDER, { each: true })
  gender             GENDER
  ///@Validator.IsPhoneNumber()
  mobileNumber       String              @unique
  /// @Validator.IsString()
  state              String
  /// @Validator.IsString()
  country            String
  /// @Validaror.IsBoolean()
  /// @Validation.IsOptional()
  confirmed          Boolean             @default(false)
  /// @Validator.IsString()
  /// @Validation.HideField({output: true})
  password           String
  /// @Validator.IsString()
  licenseFrontImage  String?
  /// @Validator.IsString()
  licenseBackImage   String?
  verificationStatus String              @default("inactive")
  wallet             Wallet?
  // TODO this is a comment not validator
  // cart         Cart?
  transactions       Transaction[]
  tokens             Token[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  Otp                Otp[]
  WithdrawalRequest  WithdrawalRequest[]
  Cart               Cart[]
}

model Wallet {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  /// @Validator.IsNumber()
  withdrawable Float
  /// @Validator.IsNumber()
  bonus        Float
  currency     String
  /// @Validator.IsString()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Transaction {
  id             Int      @id @default(autoincrement())
  /// @Validator.IsNumber()
  amount         Int
  /// @Validator.IsString()
  transactionId  Int
  /// @Validator.IsString()
  currency       String
  /// @Validator.IsString()
  transactionRef String
  /// @Validator.IsString()
  status         String
  /// @Validator.IsString()
  purpose        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  User           User?    @relation(fields: [userId], references: [id])
  userId         Int?
}

model Game {
  id           Int      @id @default(autoincrement())
  /// @Validator.IsString()
  name         String
  /// @Validator.IsString()
  imageUrl     String
  /// @Validator.IsString()
  description  String
  /// @Validator.IsString()
  gameId       String   @unique
  price        Json
  category     String
  /// @Validator.IsNumber()
  availability Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model GameCategory {
  id            Int    @id @default(autoincrement())
  /// @Validator.IsString()
  categoryName  String
  /// @Validator.IsString()
  categoryLabel String
}

model Cart {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  /// @Validator.IsString()
  name      String
  /// @Validator.IsString()
  category  String
  price     Json
  /// @Validator.IsNumber()
  quantity  Int
  /// @Validator.IsString()
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WithdrawalRequest {
  id                Int     @id @default(autoincrement())
  User              User?   @relation(fields: [userId], references: [id])
  userId            Int?
  bank              String?
  accountNumber     String?
  accountName       String?
  amount            String
  status            String?
  paypal            String?
  btcWalletAdderess String?
  licenseNumber     String?
  licenseType       String?
}

model Token {
  id           Int      @id @default(autoincrement())
  /// @Validator.IsString()
  subject      String
  /// @Validarot.IsDate()
  expire       DateTime
  /// @Validator.IsBoolean()
  validity     Boolean
  /// @Validator.IsString()
  mobileNumber String
  /// @Validator.IsString()
  code         String
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Otp {
  id           Int      @id @default(autoincrement())
  /// @Validator.IsString()
  subject      String
  /// @Validarot.IsDate()
  expire       DateTime
  /// @Validator.IsBoolean()
  validity     Boolean
  /// @Validator.IsString()
  mobileNumber String
  /// @Validator.IsEmail()
  email        String
  /// @Validator.IsString()
  code         String
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum ROLE {
  USER
  ADMIN
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

enum CURRENCY {
  USD
  NGN
}
